/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import javax.swing.JFrame;

/**
 *
 * @author USUARIO
 */
public class Info extends javax.swing.JFrame {

    /**
     * Creates new form Info
     */
    public Info() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Manual de uso\n\tAbajo a la izquierda se pueden agregar/eliminar y configurar los procesos a ser ejecutados\n\tademás de el rango de tiempo y algoritmo a utilizar, una vez se ejecuta en la parte de arriba\n\taparece una gráfica con la linea de tiempo y la ejecución de los procesos\n\nInterpretación de la información\n\n             1 - En la sección de linea de tiempo se ven los datos de la ejecución:\n\t1.1 - Ejecución t: X proc: Y termina en: Z  ---> indica que se ejecutó en el tiempo x el proceso Y que\n\t termina en tiempo Z\n\t1.2 - Deadline: X procesos [A,B,C....]  ---> indica que en el tiempo X hay un deadline de los procesos\n\t A,B,C....\n\t1.3 - Periodo: X procesos [A,B,C....] ---> indica que en el tiempo X hay un periodo de los procesos\n\t A,B,C....\n\n             2 - En la sección de informe de ejecución se ven los datos resultantes por proceso:\n\t2.2 - Proceso: N\n\t    periodo: p\n\t    deadline: d\n\t    tiempo: t\n\t    ejecuciones: a\n\t    ejecuciones perdidas: b\n\t    deadlines perdidas: c\n\t    ejecuciones esperadas: d\n\t    %deadlines perdidas: e\n\t    %ejecuciones a tiempo: f\n\t    %ejecuciones perdidas: g\n             \n             3 - Grafico en cada fila se especifica cada proceso donde aparece en:\n\t3.1 - azul los tiempos en los que se ejecuta el proceso correspondiente\n\t3.2 - D en rojo para cuando hay un deadline\n\t3.3 - P en negro para cuando hay un periodo\n\t3.4 - ND en azul para cuando un proceso N se está ejecutando justo en el deadline\n\t3.5 - NP en azul para cuando un proceso N se está ejecutando justo en el periodo\n\nGeneralidades de ejecucion de procesos\n\t-Periodo: tiempo que tiene un proceso para ejecutarse una vez\n\t-Deadline: indica apartir de qué unidad de tiempo un proceso no podrá\n\t ejecutarse antes de que termine ese periodo\n\t-Tiempo: tiempo que dura un proceso ejecutandose\t\n\t-Siempre se debe cumplir que Tiempo <= Deadline <= Periodo\n\t\nReglas generales\n\t1 - Un proceso sólo se ejecuta una vez por periodo\n\t2 - Un proceso no se ejecuta si va a terminar depués del periodo en el que se encuentra\n\t3 - Si un proceso no se ejecuta en un periodo se toma como una ejecución perdida\n\nReglas especificas\n\t1 - Earliest Deadline First (EDF)\n \t\t1 - Se ejecuta el proceso con el deadline más cercano a la unidad de tiempo en el que\n\t\tse está ejecutando y que no se haya ejecutado ya en ese periodo\n\t\t2 - Si hay N deadlines más cercanas, se elige un proceso de los N aleatoriamente a ejecutar\n\t\t3 - Una vez se selecciona un proceso a ejecutar este lo hace hasta terminar con su tiempo\n\t\t4 - Si un proceso termina de ejecutar después de su deadline se toma como un deadline perdido\n\t2 - Rate Montonic\n\t\t1 - Los procesos con menor tiempo de ejecución son los que tienen mayor prioridad\n\t\t2 - En cada instante se selecciona para ejecutar el proceso con mayor prioridad o menor tiempo\n\t\tde ejecucion restante que no se haya ejecutado en ese periodo\n\t\t3 - Si se está ejecutando un proceso n y se pasa a ejecutar un proceso m antes de que n haya terminado\n\t\teste quedará en una cola de espera para seguir ejecutando el tiempo restante una vez haya terminado m\n\t\t4 - Si hay varios procesos a ejecutar con la misma prioridad se seleccionará uno random\n\n\n\n\n\t\n             \n\t\n\t\n\t");
        jTextArea1.setFocusable(false);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 12, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 811, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Info().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
